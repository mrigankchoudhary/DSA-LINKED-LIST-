#removing duplicates from an unsorted Linked List
class Node:
    def __init__(self,data=None,next=None):
        self.data=data
        self.next=next

class LinkedList:
    def __init__(self):
        self.head=None
        self.head1=None

    def insert_at_end(self,data):
        if self.head is None:
            self.head=Node(data,None)
            return
        itr=self.head
        while itr.next:
            itr=itr.next
        itr.next = Node(data,None)

    def new_ll(self,data):
        if self.head1 is None:
            self.head1 = Node(data,None)
            return
        itr=self.head1
        while itr.next:
            itr=itr.next
        itr.next=Node(data,None)

    def check_duplicates(self,data):
        if self.head1 is None:
            self.new_ll(data)
            return
        itr = self.head1
        ind=0
        while itr:
            if itr.data == data:
                ind+=1
            itr=itr.next
        if ind==0:
            self.new_ll(data)

    def remove_duplicates(self):
        itr=self.head
        while itr:
            a=itr.data
            self.check_duplicates(a)
            itr=itr.next

    def insert_values(self,data_list):
        self.head = None
        for data in data_list:
            self.insert_at_end(data)
        self.remove_duplicates()

    def print(self):
        if self.head is None:
            print("LL is empty")
            return
        itr = self.head
        llstr = ''
        while itr:
            llstr += str(itr.data) + '--->' if itr.next else str(itr.data)
            itr = itr.next
        print("linked list with duplicates:", llstr)

        if self.head1 is None:
            print("LL is empty")
            return
        itr=self.head1
        llstr=''
        while itr:
            llstr+=str(itr.data)+'--->'if itr.next else str(itr.data)
            itr=itr.next
        print("linked list without duplicates:",llstr)

if __name__ == '__main__':
    ll = LinkedList()
    ll.insert_values([12,11,12,21,41,43,21])
    ll.print()

