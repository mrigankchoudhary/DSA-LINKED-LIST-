#creating a circular linked list
class Node:
    def __init__(self,data=None,next=None):
        self.data = data
        self.next = next

class CircularLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_end(self,data):
        if self.head is None:
            self.head=Node(data,None)
            return
        itr = self.head

        while itr.next:
            itr = itr.next

        itr.next = Node(data, None)



    def circular_path(self):
        itr=self.head
        while itr.next:
            itr=itr.next
        itr.next = self.head

    def print(self):
        if self.head is None:
            print("Linked List Is Empty")
            return
        itr=self.head
        llstr=''
        while itr:
            llstr += str(itr.data) + '---->' if itr.next else str(itr.data)
            itr = itr.next
            if itr == self.head:
                llstr+=str(itr.data)+'--->'+ str(itr.next.data) + '---->'
                break


        print(llstr)

    def insert_values(self,data_list):
        self.head = None
        for data in data_list:
            self.insert_at_end(data)


if __name__== '__main__':
    cll = CircularLinkedList()
    cll.insert_values([1,2,3,4,5,6,7])
    cll.circular_path()
    cll.print()



